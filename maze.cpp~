/*
 * @file maze.h
 * Definition of the SquareMaze class for the EasyPNG library.
 * @see https://chara.cs.illinois.edu/cs225//doxygen/mp7/classSquareMaze.html
 *
 * @author Robert J Paul
 * @date Created: Fall 2015
 */

#include "maze.h"
#include "dsets.h"
#include <time.h>
#include <iostream>
#include <queue>

using namespace std;

SquareMaze::SquareMaze()
{
	maze = NULL;
	w = 0;
	h = 0;
}

SquareMaze::~SquareMaze()
{
	clear();
}
	
void SquareMaze::clear()
{
	if(maze)
	{
		for(int i = 0; i < w; i++)
			delete [] maze[i];
		delete [] maze;
		maze = NULL; //NOT SURE
	}
}

void SquareMaze::makeMaze(int width, int height)
{
	int count = 0;
	clear();

	w = width;
	h = height;

	DisjointSets djset; //change back
	djset.addelements(w * h);

	//create raw maze
	maze = new cell * [w];
	for(int i = 0; i < w; i++)
		maze[i] = new cell[h];
	
	//assign initial values
	for(int i = 0; i < w; i++)
	{
		for(int j = 0; j < h; j++)
		{
			setWall(i, j, 0, true);
			setWall(i, j, 1, true);
			maze[i][j]._x = i; //used in solve maze
			maze[i][j]._y = j;	//used in solve maze
			maze[i][j].dist = 0;
		}
	}

	//initialize random seed
	srand(time(NULL));
	
	int rh = 0;
	int rw = 0;
	int edges = 0;

	//delete random elements
	
	while(edges < (w * h) - 1)
	{
		//while(rw >= w)
			rw = rand() % w; //random number between 0 and w - 1
		//while(rh >= h)
		    rh = rand() % h; //random number between 0 and h - 1

		double z = (double)rand() / (double)RAND_MAX;
		//std::cout << z << std::endl;
		//std::cout << edges << std::endl;
		//std::cout << w*h -1 << std::endl;
		if(z < 0.5 && rw < w - 1)
		{
			if(djset.find(rh + ((rw + 1) * h)) != djset.find(rh + (rw * h)))
			{
				djset.setunion(djset.find(rh + ((rw +1) * h)), djset.find(rh + (rw * h)));
				setWall(rw, rh, 0, false);
				edges++;
				//std::cout << edges << std::endl;
			}
		}
		else if(rh < h - 1)
		{
			if(djset.find((h * rw) + (rh + 1)) != djset.find((h * rw) + rh))
			{
				djset.setunion(djset.find((h * rw) + (rh +1)), djset.find((h * rw) + rh));
				setWall(rw, rh, 1, false);
				edges++;
				//std::cout << edges << std::endl;
			}
		}
	}
	  
	

}

bool SquareMaze::hitAllCells()
{
	for(int i = 0; i < h; i++)
	{
		for(int j = 0; j < w; j++)
		{
			if(maze[i][j].right == true && maze[i][j].down == true)
				return false;
		}
	}
	return true;
}

bool SquareMaze::canTravel(int x, int y, int dir) const
{
	if(dir == 0)
	{
		if(x == w - 1)
			return false;
		else
			return !maze[x][y].right;
	}
	
	else if(dir == 1)
	{
		if(y == h - 1)
			return false;
		else
			return !maze[x][y].down;	
	}
	
	else if(dir == 2)
	{
		if(x == 0)
			return false;
		else
			return !maze[x - 1][y].right;
	}

	else if(dir == 3)
	{
		if(y == 0)
			return false;
		else
			return !maze[x][y - 1].down;	
	}

	else
		return false;
}

void SquareMaze::setWall(int x, int y, int dir, bool exists)
{
	if(dir == 0)
		maze[x][y].right = exists;
	else
		maze[x][y].down = exists;
}

vector<int> SquareMaze::solveMaze()
{
	bool ** explored = new bool * [w];
	for(int i = 0; i < w; i++)
		explored[i] = new bool[h];

	for(int i = 0; i < w; i++)
		for(int j = 0; j < h; j++)
			explored[i][j] = false;

	queue<cell> q;
	maze[0][0].dist = 0;
	q.push(maze[0][0]);
	explored[0][0] = true;
	
	vector<int> v;
	while(!q.empty())
	{
		cell curr = q.front();
		q.pop();
		
			if(canTravel(curr._x, curr._y, 0) && !explored[curr._x + 1][curr._y])
			{
				explored[curr._x + 1][curr._y] = true;
				q.push(maze[curr._x + 1][curr._y]);
				//v.push_back(0);
				maze[curr._x + 1][curr._y].dist = maze[curr._x][curr._y].dist + 1;
			}

			if(canTravel(curr._x, curr._y, 1) && !explored[curr._x][curr._y + 1])
			{
				explored[curr._x][curr._y + 1] = true;
				q.push(maze[curr._x][curr._y + 1]);
				//v.push_back(1);
				maze[curr._x][curr._y + 1].dist = maze[curr._x][curr._y].dist + 1;
			}

			if(canTravel(curr._x, curr._y, 2) && !explored[curr._x - 1][curr._y])
			{
				explored[curr._x - 1][curr._y] = true;
				q.push(maze[curr._x - 1][curr._y]);
				//v.push_back(2);
				maze[curr._x - 1][curr._y].dist = maze[curr._x][curr._y].dist + 1;
			}

			if(canTravel(curr._x, curr._y, 3) && !explored[curr._x][curr._y - 1])
			{
				explored[curr._x][curr._y - 1] = true;
				q.push(maze[curr._x][curr. _y - 1]);
				//v.push_back(3);
				maze[curr._x][curr._y - 1].dist = maze[curr._x][curr._y].dist + 1;
			}

	}

	int greatest_dist = 0;
	int greatest_index = 0;
	for(int i = 0; i < w; i++)
	{
		if(maze[i][h-1].dist > greatest_dist)
		{
			greatest_dist = maze[i][h-1].dist;
			greatest_index = i;
		}
	}

	//last_cell = i;
	cell curr = maze[greatest_index][h-1];

	while(curr._x != 0 || curr._y != 0)
	{
		if(canTravel(curr._x, curr._y, 0) && (maze[curr._x + 1][curr._y].dist == maze[curr._x][curr._y].dist - 1))
		{
			v.push_back(2);
			curr = maze[curr._x + 1][curr._y];
		}
		if(canTravel(curr._x, curr._y, 1) && (maze[curr._x][curr._y + 1].dist == maze[curr._x][curr._y].dist - 1))
		{
			v.push_back(3);
			curr = maze[curr._x][curr._y + 1];
		}
		if(canTravel(curr._x, curr._y, 2) && (maze[curr._x - 1][curr._y].dist == maze[curr._x][curr._y].dist - 1))
		{
			v.push_back(0);
			curr = maze[curr._x - 1][curr._y];
		}
		if(canTravel(curr._x, curr._y, 3) && (maze[curr._x][curr._y - 1].dist == maze[curr._x][curr._y].dist - 1))
		{
			v.push_back(1);
			curr = maze[curr._x][curr._y - 1];
		}
	}

	std::reverse(v.begin(), v.end());

	for(int i = 0; i < w; i++)
			delete [] explored[i];
		delete [] explored;

	return v;

}

PNG * SquareMaze::drawMaze() const
{
	PNG * canvas = new PNG((w * 10) + 1, (h * 10) + 1);

	//black top row
	for(int i = 0; i < (w * 10) + 1; i++)
		*(*canvas)(i, 0) = RGBAPixel(0, 0, 0);

	//white entrance
	for(int i = 0; i < 10; i++)
		*(*canvas)(i, 0) = RGBAPixel(255, 255, 255);

	//block leftmost column
	for(int i = 0; i < (h * 10) + 1; i++)
		*(*canvas)(0, i) = RGBAPixel(0, 0, 0);

	for(int x = 0; x < w; x++)
	{
		for(int y = 0; y < h; y++)
		{
			if(maze[x][y].right)
			{
				for(int k = 0; k <= 10; k++)
					*(*canvas)((x + 1) * 10, y * 10 + k) = RGBAPixel(0, 0, 0);
			}

			if(maze[x][y].down)
			{
				for(int k = 0; k <= 10; k++)
					*(*canvas)(x * 10 + k, (y + 1) * 10) = RGBAPixel(0, 0, 0);
			}
		}
	}
	return canvas;
}

PNG * SquareMaze::drawMazeWithSolution()
{
	PNG * canvas = drawMaze();
	vector<int> solved = solveMaze();
	//cout << solved.size() << endl;

	size_t x = 5;
	size_t y = 5;
	for(size_t i = 0; i < solved.size(); i++)
	{
		if(solved[i] == 0)
		{
			for(int j = 0; j <= 10; j++)
				*(*canvas)(x + j, y) = RGBAPixel(255, 0, 0);
			x += 10;
		}
		if(solved[i] == 1)
		{
			for(int j = 0; j <= 10; j++)
				*(*canvas)(x, y + j) = RGBAPixel(255, 0, 0);
			y += 10;
		}
		if(solved[i] == 2)
		{
			for(int j = 0; j <= 10; j++)
				*(*canvas)(x - j, y) = RGBAPixel(255, 0, 0);
			x -= 10;
		}
		if(solved[i] == 3)
		{
			for(int j = 0; j <= 10; j++)
				*(*canvas)(x, y - j) = RGBAPixel(255, 0, 0);
			y -= 10;
		}
	}
	//cout << "x: " << x << "y: " << y << endl;

	//whiten exit
	for(int k = 1; k <= 9; k++)
		*(*canvas)((x - 5 + k) , canvas.height() - 1) = RGBAPixel(255, 255, 255);
		 
	return canvas;
}
